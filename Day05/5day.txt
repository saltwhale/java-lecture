제어문

- 조건문
1) if, if else, if else if ~ else

if (조건비교식) {
.. 실행부
}
조건비교식이 참일때 실행

if(조건비교식) {
 ... 실행부
} else {
 ... 실행부
}
조건비교식이 참일 때 1 실행부 실행
거짓을때 2 실행부 실행

if(조건비교식) {
 ... 실행부
} else if(조건비교식){
 ... 실행부
} else {
 ... 실행부
}

2. switch ~case

switch(정수1) {

	case 정수2 :
		... 실행부
	break;
		...
		...
	default:
		... 실행부
}

정수1과 정수2가 같은 경우 1실행부 실행
...에 맞는 정수가 없는 경우 default 실행부가 실행
case문에서는 대괄호로 구분하지 않기 때문에 실행부 이후에 
break를 안 해둔 상태라면 ???
그래서 반드시 break를 써두어야 한다.

- 반복문

1. for

 for(할당/대입; 조건비교; 증감연산) {
  ... 실행부			<- 조건비교가 참일경우 실행
}

 for( ; ; ) {

}
이런 식으로 활용하는 경우 = do ~ while문과 동일


2. while

 while(조건비교문) {
  ... 실행부		<-조건식이 참인 경우 실행
  }


3. do ~ while	<- 무조건 1회는 실행하고 그 뒤에 조건비교를 함

do {
 ... 실행부
  } while(조건비교문);

*) 
break;	<- 여기서 멈추고 이 영역에서 탈출하라
continue;	<- 이 밑에 내용을 실행시키지 말고 조건비교문/증감으로 가라

ex)
짝수만 출력하고 싶은 경우
for(int i = 1; i<=10; i ++) {

 if( i % 2 != 0 ) continue;
  System.out.println( i );

}

짝수를 출력하다 i가 50이 되는 순간 for문의 영역을 탈출함
for(int i = 1; i<=10; i ++) {

 if( i % 2 != 0 ) continue;
  System.out.println( i );

 if ( i == 50 ) break;

}

break를 만나면 안에 for문 영역을 탈출해서 큰 영역을 연산함
for(int x = 10; x<50; x++) {
 for(int i = 1; i<=10; i ++) {

  if( i % 2 != 0 ) continue;
   System.out.println( i );
 }
}


